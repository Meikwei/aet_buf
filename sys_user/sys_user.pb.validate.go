// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: sys_user/sys_user.proto

package sys_user

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateSysUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateSysUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateSysUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateSysUserRequestMultiError, or nil if none found.
func (m *CreateSysUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateSysUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserName()) < 2 {
		err := CreateSysUserRequestValidationError{
			field:  "UserName",
			reason: "value length must be at least 2 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetUserPassword()) < 6 {
		err := CreateSysUserRequestValidationError{
			field:  "UserPassword",
			reason: "value length must be at least 6 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetUserPhone() != "" {

		if utf8.RuneCountInString(m.GetUserPhone()) != 11 {
			err := CreateSysUserRequestValidationError{
				field:  "UserPhone",
				reason: "value length must be 11 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)

		}

	}

	if m.GetUserAvatar() != "" {

	}

	if len(errors) > 0 {
		return CreateSysUserRequestMultiError(errors)
	}

	return nil
}

// CreateSysUserRequestMultiError is an error wrapping multiple validation
// errors returned by CreateSysUserRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateSysUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateSysUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateSysUserRequestMultiError) AllErrors() []error { return m }

// CreateSysUserRequestValidationError is the validation error returned by
// CreateSysUserRequest.Validate if the designated constraints aren't met.
type CreateSysUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateSysUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateSysUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateSysUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateSysUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateSysUserRequestValidationError) ErrorName() string {
	return "CreateSysUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateSysUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateSysUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateSysUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateSysUserRequestValidationError{}

// Validate checks the field values on CreateSysUserReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateSysUserReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateSysUserReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateSysUserReplyMultiError, or nil if none found.
func (m *CreateSysUserReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateSysUserReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return CreateSysUserReplyMultiError(errors)
	}

	return nil
}

// CreateSysUserReplyMultiError is an error wrapping multiple validation errors
// returned by CreateSysUserReply.ValidateAll() if the designated constraints
// aren't met.
type CreateSysUserReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateSysUserReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateSysUserReplyMultiError) AllErrors() []error { return m }

// CreateSysUserReplyValidationError is the validation error returned by
// CreateSysUserReply.Validate if the designated constraints aren't met.
type CreateSysUserReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateSysUserReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateSysUserReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateSysUserReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateSysUserReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateSysUserReplyValidationError) ErrorName() string {
	return "CreateSysUserReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateSysUserReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateSysUserReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateSysUserReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateSysUserReplyValidationError{}

// Validate checks the field values on DeleteSysUserByIDRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteSysUserByIDRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteSysUserByIDRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteSysUserByIDRequestMultiError, or nil if none found.
func (m *DeleteSysUserByIDRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteSysUserByIDRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := DeleteSysUserByIDRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteSysUserByIDRequestMultiError(errors)
	}

	return nil
}

// DeleteSysUserByIDRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteSysUserByIDRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteSysUserByIDRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteSysUserByIDRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteSysUserByIDRequestMultiError) AllErrors() []error { return m }

// DeleteSysUserByIDRequestValidationError is the validation error returned by
// DeleteSysUserByIDRequest.Validate if the designated constraints aren't met.
type DeleteSysUserByIDRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteSysUserByIDRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteSysUserByIDRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteSysUserByIDRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteSysUserByIDRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteSysUserByIDRequestValidationError) ErrorName() string {
	return "DeleteSysUserByIDRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteSysUserByIDRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteSysUserByIDRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteSysUserByIDRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteSysUserByIDRequestValidationError{}

// Validate checks the field values on DeleteSysUserByIDReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteSysUserByIDReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteSysUserByIDReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteSysUserByIDReplyMultiError, or nil if none found.
func (m *DeleteSysUserByIDReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteSysUserByIDReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteSysUserByIDReplyMultiError(errors)
	}

	return nil
}

// DeleteSysUserByIDReplyMultiError is an error wrapping multiple validation
// errors returned by DeleteSysUserByIDReply.ValidateAll() if the designated
// constraints aren't met.
type DeleteSysUserByIDReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteSysUserByIDReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteSysUserByIDReplyMultiError) AllErrors() []error { return m }

// DeleteSysUserByIDReplyValidationError is the validation error returned by
// DeleteSysUserByIDReply.Validate if the designated constraints aren't met.
type DeleteSysUserByIDReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteSysUserByIDReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteSysUserByIDReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteSysUserByIDReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteSysUserByIDReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteSysUserByIDReplyValidationError) ErrorName() string {
	return "DeleteSysUserByIDReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteSysUserByIDReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteSysUserByIDReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteSysUserByIDReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteSysUserByIDReplyValidationError{}

// Validate checks the field values on DeleteSysUserByIDsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteSysUserByIDsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteSysUserByIDsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteSysUserByIDsRequestMultiError, or nil if none found.
func (m *DeleteSysUserByIDsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteSysUserByIDsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetIds()) < 1 {
		err := DeleteSysUserByIDsRequestValidationError{
			field:  "Ids",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteSysUserByIDsRequestMultiError(errors)
	}

	return nil
}

// DeleteSysUserByIDsRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteSysUserByIDsRequest.ValidateAll() if the
// designated constraints aren't met.
type DeleteSysUserByIDsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteSysUserByIDsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteSysUserByIDsRequestMultiError) AllErrors() []error { return m }

// DeleteSysUserByIDsRequestValidationError is the validation error returned by
// DeleteSysUserByIDsRequest.Validate if the designated constraints aren't met.
type DeleteSysUserByIDsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteSysUserByIDsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteSysUserByIDsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteSysUserByIDsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteSysUserByIDsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteSysUserByIDsRequestValidationError) ErrorName() string {
	return "DeleteSysUserByIDsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteSysUserByIDsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteSysUserByIDsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteSysUserByIDsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteSysUserByIDsRequestValidationError{}

// Validate checks the field values on DeleteSysUserByIDsReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteSysUserByIDsReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteSysUserByIDsReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteSysUserByIDsReplyMultiError, or nil if none found.
func (m *DeleteSysUserByIDsReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteSysUserByIDsReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteSysUserByIDsReplyMultiError(errors)
	}

	return nil
}

// DeleteSysUserByIDsReplyMultiError is an error wrapping multiple validation
// errors returned by DeleteSysUserByIDsReply.ValidateAll() if the designated
// constraints aren't met.
type DeleteSysUserByIDsReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteSysUserByIDsReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteSysUserByIDsReplyMultiError) AllErrors() []error { return m }

// DeleteSysUserByIDsReplyValidationError is the validation error returned by
// DeleteSysUserByIDsReply.Validate if the designated constraints aren't met.
type DeleteSysUserByIDsReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteSysUserByIDsReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteSysUserByIDsReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteSysUserByIDsReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteSysUserByIDsReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteSysUserByIDsReplyValidationError) ErrorName() string {
	return "DeleteSysUserByIDsReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteSysUserByIDsReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteSysUserByIDsReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteSysUserByIDsReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteSysUserByIDsReplyValidationError{}

// Validate checks the field values on UpdateSysUserByIDRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateSysUserByIDRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateSysUserByIDRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateSysUserByIDRequestMultiError, or nil if none found.
func (m *UpdateSysUserByIDRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateSysUserByIDRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := UpdateSysUserByIDRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for UserName

	// no validation rules for UserPassword

	// no validation rules for UserPhone

	// no validation rules for UserAvatar

	if len(errors) > 0 {
		return UpdateSysUserByIDRequestMultiError(errors)
	}

	return nil
}

// UpdateSysUserByIDRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateSysUserByIDRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateSysUserByIDRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateSysUserByIDRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateSysUserByIDRequestMultiError) AllErrors() []error { return m }

// UpdateSysUserByIDRequestValidationError is the validation error returned by
// UpdateSysUserByIDRequest.Validate if the designated constraints aren't met.
type UpdateSysUserByIDRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateSysUserByIDRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateSysUserByIDRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateSysUserByIDRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateSysUserByIDRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateSysUserByIDRequestValidationError) ErrorName() string {
	return "UpdateSysUserByIDRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateSysUserByIDRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateSysUserByIDRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateSysUserByIDRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateSysUserByIDRequestValidationError{}

// Validate checks the field values on UpdateSysUserByIDReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateSysUserByIDReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateSysUserByIDReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateSysUserByIDReplyMultiError, or nil if none found.
func (m *UpdateSysUserByIDReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateSysUserByIDReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateSysUserByIDReplyMultiError(errors)
	}

	return nil
}

// UpdateSysUserByIDReplyMultiError is an error wrapping multiple validation
// errors returned by UpdateSysUserByIDReply.ValidateAll() if the designated
// constraints aren't met.
type UpdateSysUserByIDReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateSysUserByIDReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateSysUserByIDReplyMultiError) AllErrors() []error { return m }

// UpdateSysUserByIDReplyValidationError is the validation error returned by
// UpdateSysUserByIDReply.Validate if the designated constraints aren't met.
type UpdateSysUserByIDReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateSysUserByIDReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateSysUserByIDReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateSysUserByIDReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateSysUserByIDReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateSysUserByIDReplyValidationError) ErrorName() string {
	return "UpdateSysUserByIDReplyValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateSysUserByIDReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateSysUserByIDReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateSysUserByIDReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateSysUserByIDReplyValidationError{}

// Validate checks the field values on SysUser with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SysUser) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SysUser with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in SysUserMultiError, or nil if none found.
func (m *SysUser) ValidateAll() error {
	return m.validate(true)
}

func (m *SysUser) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for UserName

	// no validation rules for UserNumber

	// no validation rules for UserPassword

	// no validation rules for UserPhone

	// no validation rules for UserAvatar

	// no validation rules for CreateUser

	// no validation rules for UpdateUser

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if len(errors) > 0 {
		return SysUserMultiError(errors)
	}

	return nil
}

// SysUserMultiError is an error wrapping multiple validation errors returned
// by SysUser.ValidateAll() if the designated constraints aren't met.
type SysUserMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SysUserMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SysUserMultiError) AllErrors() []error { return m }

// SysUserValidationError is the validation error returned by SysUser.Validate
// if the designated constraints aren't met.
type SysUserValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SysUserValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SysUserValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SysUserValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SysUserValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SysUserValidationError) ErrorName() string { return "SysUserValidationError" }

// Error satisfies the builtin error interface
func (e SysUserValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSysUser.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SysUserValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SysUserValidationError{}

// Validate checks the field values on GetSysUserByIDRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetSysUserByIDRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSysUserByIDRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSysUserByIDRequestMultiError, or nil if none found.
func (m *GetSysUserByIDRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSysUserByIDRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := GetSysUserByIDRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetSysUserByIDRequestMultiError(errors)
	}

	return nil
}

// GetSysUserByIDRequestMultiError is an error wrapping multiple validation
// errors returned by GetSysUserByIDRequest.ValidateAll() if the designated
// constraints aren't met.
type GetSysUserByIDRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSysUserByIDRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSysUserByIDRequestMultiError) AllErrors() []error { return m }

// GetSysUserByIDRequestValidationError is the validation error returned by
// GetSysUserByIDRequest.Validate if the designated constraints aren't met.
type GetSysUserByIDRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSysUserByIDRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSysUserByIDRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSysUserByIDRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSysUserByIDRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSysUserByIDRequestValidationError) ErrorName() string {
	return "GetSysUserByIDRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetSysUserByIDRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSysUserByIDRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSysUserByIDRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSysUserByIDRequestValidationError{}

// Validate checks the field values on GetSysUserByIDReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetSysUserByIDReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSysUserByIDReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSysUserByIDReplyMultiError, or nil if none found.
func (m *GetSysUserByIDReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSysUserByIDReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSysUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetSysUserByIDReplyValidationError{
					field:  "SysUser",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetSysUserByIDReplyValidationError{
					field:  "SysUser",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSysUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetSysUserByIDReplyValidationError{
				field:  "SysUser",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetSysUserByIDReplyMultiError(errors)
	}

	return nil
}

// GetSysUserByIDReplyMultiError is an error wrapping multiple validation
// errors returned by GetSysUserByIDReply.ValidateAll() if the designated
// constraints aren't met.
type GetSysUserByIDReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSysUserByIDReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSysUserByIDReplyMultiError) AllErrors() []error { return m }

// GetSysUserByIDReplyValidationError is the validation error returned by
// GetSysUserByIDReply.Validate if the designated constraints aren't met.
type GetSysUserByIDReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSysUserByIDReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSysUserByIDReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSysUserByIDReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSysUserByIDReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSysUserByIDReplyValidationError) ErrorName() string {
	return "GetSysUserByIDReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetSysUserByIDReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSysUserByIDReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSysUserByIDReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSysUserByIDReplyValidationError{}

// Validate checks the field values on GetSysUserByConditionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetSysUserByConditionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSysUserByConditionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSysUserByConditionRequestMultiError, or nil if none found.
func (m *GetSysUserByConditionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSysUserByConditionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetConditions()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetSysUserByConditionRequestValidationError{
					field:  "Conditions",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetSysUserByConditionRequestValidationError{
					field:  "Conditions",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConditions()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetSysUserByConditionRequestValidationError{
				field:  "Conditions",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetParams()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetSysUserByConditionRequestValidationError{
					field:  "Params",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetSysUserByConditionRequestValidationError{
					field:  "Params",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetParams()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetSysUserByConditionRequestValidationError{
				field:  "Params",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetSysUserByConditionRequestMultiError(errors)
	}

	return nil
}

// GetSysUserByConditionRequestMultiError is an error wrapping multiple
// validation errors returned by GetSysUserByConditionRequest.ValidateAll() if
// the designated constraints aren't met.
type GetSysUserByConditionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSysUserByConditionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSysUserByConditionRequestMultiError) AllErrors() []error { return m }

// GetSysUserByConditionRequestValidationError is the validation error returned
// by GetSysUserByConditionRequest.Validate if the designated constraints
// aren't met.
type GetSysUserByConditionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSysUserByConditionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSysUserByConditionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSysUserByConditionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSysUserByConditionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSysUserByConditionRequestValidationError) ErrorName() string {
	return "GetSysUserByConditionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetSysUserByConditionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSysUserByConditionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSysUserByConditionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSysUserByConditionRequestValidationError{}

// Validate checks the field values on GetSysUserByConditionReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetSysUserByConditionReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSysUserByConditionReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSysUserByConditionReplyMultiError, or nil if none found.
func (m *GetSysUserByConditionReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSysUserByConditionReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSysUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetSysUserByConditionReplyValidationError{
					field:  "SysUser",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetSysUserByConditionReplyValidationError{
					field:  "SysUser",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSysUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetSysUserByConditionReplyValidationError{
				field:  "SysUser",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetSysUserByConditionReplyMultiError(errors)
	}

	return nil
}

// GetSysUserByConditionReplyMultiError is an error wrapping multiple
// validation errors returned by GetSysUserByConditionReply.ValidateAll() if
// the designated constraints aren't met.
type GetSysUserByConditionReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSysUserByConditionReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSysUserByConditionReplyMultiError) AllErrors() []error { return m }

// GetSysUserByConditionReplyValidationError is the validation error returned
// by GetSysUserByConditionReply.Validate if the designated constraints aren't met.
type GetSysUserByConditionReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSysUserByConditionReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSysUserByConditionReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSysUserByConditionReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSysUserByConditionReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSysUserByConditionReplyValidationError) ErrorName() string {
	return "GetSysUserByConditionReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetSysUserByConditionReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSysUserByConditionReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSysUserByConditionReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSysUserByConditionReplyValidationError{}

// Validate checks the field values on ListSysUserByIDsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListSysUserByIDsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListSysUserByIDsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListSysUserByIDsRequestMultiError, or nil if none found.
func (m *ListSysUserByIDsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListSysUserByIDsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetIds()) < 1 {
		err := ListSysUserByIDsRequestValidationError{
			field:  "Ids",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListSysUserByIDsRequestMultiError(errors)
	}

	return nil
}

// ListSysUserByIDsRequestMultiError is an error wrapping multiple validation
// errors returned by ListSysUserByIDsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListSysUserByIDsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListSysUserByIDsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListSysUserByIDsRequestMultiError) AllErrors() []error { return m }

// ListSysUserByIDsRequestValidationError is the validation error returned by
// ListSysUserByIDsRequest.Validate if the designated constraints aren't met.
type ListSysUserByIDsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSysUserByIDsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSysUserByIDsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSysUserByIDsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSysUserByIDsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSysUserByIDsRequestValidationError) ErrorName() string {
	return "ListSysUserByIDsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListSysUserByIDsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSysUserByIDsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSysUserByIDsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSysUserByIDsRequestValidationError{}

// Validate checks the field values on ListSysUserByIDsReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListSysUserByIDsReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListSysUserByIDsReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListSysUserByIDsReplyMultiError, or nil if none found.
func (m *ListSysUserByIDsReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListSysUserByIDsReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetSysUsers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListSysUserByIDsReplyValidationError{
						field:  fmt.Sprintf("SysUsers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListSysUserByIDsReplyValidationError{
						field:  fmt.Sprintf("SysUsers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListSysUserByIDsReplyValidationError{
					field:  fmt.Sprintf("SysUsers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListSysUserByIDsReplyMultiError(errors)
	}

	return nil
}

// ListSysUserByIDsReplyMultiError is an error wrapping multiple validation
// errors returned by ListSysUserByIDsReply.ValidateAll() if the designated
// constraints aren't met.
type ListSysUserByIDsReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListSysUserByIDsReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListSysUserByIDsReplyMultiError) AllErrors() []error { return m }

// ListSysUserByIDsReplyValidationError is the validation error returned by
// ListSysUserByIDsReply.Validate if the designated constraints aren't met.
type ListSysUserByIDsReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSysUserByIDsReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSysUserByIDsReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSysUserByIDsReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSysUserByIDsReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSysUserByIDsReplyValidationError) ErrorName() string {
	return "ListSysUserByIDsReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ListSysUserByIDsReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSysUserByIDsReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSysUserByIDsReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSysUserByIDsReplyValidationError{}

// Validate checks the field values on ListSysUserReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListSysUserReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListSysUserReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListSysUserReplyMultiError, or nil if none found.
func (m *ListSysUserReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListSysUserReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetSysUsers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListSysUserReplyValidationError{
						field:  fmt.Sprintf("SysUsers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListSysUserReplyValidationError{
						field:  fmt.Sprintf("SysUsers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListSysUserReplyValidationError{
					field:  fmt.Sprintf("SysUsers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListSysUserReplyMultiError(errors)
	}

	return nil
}

// ListSysUserReplyMultiError is an error wrapping multiple validation errors
// returned by ListSysUserReply.ValidateAll() if the designated constraints
// aren't met.
type ListSysUserReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListSysUserReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListSysUserReplyMultiError) AllErrors() []error { return m }

// ListSysUserReplyValidationError is the validation error returned by
// ListSysUserReply.Validate if the designated constraints aren't met.
type ListSysUserReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSysUserReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSysUserReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSysUserReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSysUserReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSysUserReplyValidationError) ErrorName() string { return "ListSysUserReplyValidationError" }

// Error satisfies the builtin error interface
func (e ListSysUserReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSysUserReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSysUserReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSysUserReplyValidationError{}

// Validate checks the field values on ListUserByIDsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListUserByIDsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListUserByIDsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListUserByIDsRequestMultiError, or nil if none found.
func (m *ListUserByIDsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListUserByIDsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetIds()) < 1 {
		err := ListUserByIDsRequestValidationError{
			field:  "Ids",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListUserByIDsRequestMultiError(errors)
	}

	return nil
}

// ListUserByIDsRequestMultiError is an error wrapping multiple validation
// errors returned by ListUserByIDsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListUserByIDsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListUserByIDsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListUserByIDsRequestMultiError) AllErrors() []error { return m }

// ListUserByIDsRequestValidationError is the validation error returned by
// ListUserByIDsRequest.Validate if the designated constraints aren't met.
type ListUserByIDsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUserByIDsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUserByIDsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUserByIDsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUserByIDsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUserByIDsRequestValidationError) ErrorName() string {
	return "ListUserByIDsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListUserByIDsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUserByIDsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUserByIDsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUserByIDsRequestValidationError{}

// Validate checks the field values on ListUserByIDsReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListUserByIDsReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListUserByIDsReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListUserByIDsReplyMultiError, or nil if none found.
func (m *ListUserByIDsReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListUserByIDsReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetUsers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListUserByIDsReplyValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListUserByIDsReplyValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListUserByIDsReplyValidationError{
					field:  fmt.Sprintf("Users[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListUserByIDsReplyMultiError(errors)
	}

	return nil
}

// ListUserByIDsReplyMultiError is an error wrapping multiple validation errors
// returned by ListUserByIDsReply.ValidateAll() if the designated constraints
// aren't met.
type ListUserByIDsReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListUserByIDsReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListUserByIDsReplyMultiError) AllErrors() []error { return m }

// ListUserByIDsReplyValidationError is the validation error returned by
// ListUserByIDsReply.Validate if the designated constraints aren't met.
type ListUserByIDsReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUserByIDsReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUserByIDsReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUserByIDsReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUserByIDsReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUserByIDsReplyValidationError) ErrorName() string {
	return "ListUserByIDsReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ListUserByIDsReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUserByIDsReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUserByIDsReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUserByIDsReplyValidationError{}

// Validate checks the field values on ListUserByLastIDRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListUserByLastIDRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListUserByLastIDRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListUserByLastIDRequestMultiError, or nil if none found.
func (m *ListUserByLastIDRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListUserByLastIDRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for LastID

	if m.GetLimit() <= 0 {
		err := ListUserByLastIDRequestValidationError{
			field:  "Limit",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Sort

	if len(errors) > 0 {
		return ListUserByLastIDRequestMultiError(errors)
	}

	return nil
}

// ListUserByLastIDRequestMultiError is an error wrapping multiple validation
// errors returned by ListUserByLastIDRequest.ValidateAll() if the designated
// constraints aren't met.
type ListUserByLastIDRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListUserByLastIDRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListUserByLastIDRequestMultiError) AllErrors() []error { return m }

// ListUserByLastIDRequestValidationError is the validation error returned by
// ListUserByLastIDRequest.Validate if the designated constraints aren't met.
type ListUserByLastIDRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUserByLastIDRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUserByLastIDRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUserByLastIDRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUserByLastIDRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUserByLastIDRequestValidationError) ErrorName() string {
	return "ListUserByLastIDRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListUserByLastIDRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUserByLastIDRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUserByLastIDRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUserByLastIDRequestValidationError{}

// Validate checks the field values on ListUserByLastIDReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListUserByLastIDReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListUserByLastIDReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListUserByLastIDReplyMultiError, or nil if none found.
func (m *ListUserByLastIDReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListUserByLastIDReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetUsers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListUserByLastIDReplyValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListUserByLastIDReplyValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListUserByLastIDReplyValidationError{
					field:  fmt.Sprintf("Users[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListUserByLastIDReplyMultiError(errors)
	}

	return nil
}

// ListUserByLastIDReplyMultiError is an error wrapping multiple validation
// errors returned by ListUserByLastIDReply.ValidateAll() if the designated
// constraints aren't met.
type ListUserByLastIDReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListUserByLastIDReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListUserByLastIDReplyMultiError) AllErrors() []error { return m }

// ListUserByLastIDReplyValidationError is the validation error returned by
// ListUserByLastIDReply.Validate if the designated constraints aren't met.
type ListUserByLastIDReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUserByLastIDReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUserByLastIDReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUserByLastIDReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUserByLastIDReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUserByLastIDReplyValidationError) ErrorName() string {
	return "ListUserByLastIDReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ListUserByLastIDReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUserByLastIDReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUserByLastIDReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUserByLastIDReplyValidationError{}

// Validate checks the field values on ListUserRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListUserRequestMultiError, or nil if none found.
func (m *ListUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetParams()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListUserRequestValidationError{
					field:  "Params",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListUserRequestValidationError{
					field:  "Params",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetParams()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListUserRequestValidationError{
				field:  "Params",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListUserRequestMultiError(errors)
	}

	return nil
}

// ListUserRequestMultiError is an error wrapping multiple validation errors
// returned by ListUserRequest.ValidateAll() if the designated constraints
// aren't met.
type ListUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListUserRequestMultiError) AllErrors() []error { return m }

// ListUserRequestValidationError is the validation error returned by
// ListUserRequest.Validate if the designated constraints aren't met.
type ListUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUserRequestValidationError) ErrorName() string { return "ListUserRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUserRequestValidationError{}

// Validate checks the field values on ListUserReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListUserReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListUserReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListUserReplyMultiError, or
// nil if none found.
func (m *ListUserReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListUserReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetUsers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListUserReplyValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListUserReplyValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListUserReplyValidationError{
					field:  fmt.Sprintf("Users[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListUserReplyMultiError(errors)
	}

	return nil
}

// ListUserReplyMultiError is an error wrapping multiple validation errors
// returned by ListUserReply.ValidateAll() if the designated constraints
// aren't met.
type ListUserReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListUserReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListUserReplyMultiError) AllErrors() []error { return m }

// ListUserReplyValidationError is the validation error returned by
// ListUserReply.Validate if the designated constraints aren't met.
type ListUserReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUserReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUserReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUserReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUserReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUserReplyValidationError) ErrorName() string { return "ListUserReplyValidationError" }

// Error satisfies the builtin error interface
func (e ListUserReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUserReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUserReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUserReplyValidationError{}
