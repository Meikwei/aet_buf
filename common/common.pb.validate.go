// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: common/common.proto

package common

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on RequestPagination with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RequestPagination) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RequestPagination with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RequestPaginationMultiError, or nil if none found.
func (m *RequestPagination) ValidateAll() error {
	return m.validate(true)
}

func (m *RequestPagination) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PageNumber

	// no validation rules for ShowNumber

	if len(errors) > 0 {
		return RequestPaginationMultiError(errors)
	}

	return nil
}

// RequestPaginationMultiError is an error wrapping multiple validation errors
// returned by RequestPagination.ValidateAll() if the designated constraints
// aren't met.
type RequestPaginationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RequestPaginationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RequestPaginationMultiError) AllErrors() []error { return m }

// RequestPaginationValidationError is the validation error returned by
// RequestPagination.Validate if the designated constraints aren't met.
type RequestPaginationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RequestPaginationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RequestPaginationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RequestPaginationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RequestPaginationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RequestPaginationValidationError) ErrorName() string {
	return "RequestPaginationValidationError"
}

// Error satisfies the builtin error interface
func (e RequestPaginationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRequestPagination.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RequestPaginationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RequestPaginationValidationError{}

// Validate checks the field values on BaseResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *BaseResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BaseResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in BaseResponseMultiError, or
// nil if none found.
func (m *BaseResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *BaseResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if len(errors) > 0 {
		return BaseResponseMultiError(errors)
	}

	return nil
}

// BaseResponseMultiError is an error wrapping multiple validation errors
// returned by BaseResponse.ValidateAll() if the designated constraints aren't met.
type BaseResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BaseResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BaseResponseMultiError) AllErrors() []error { return m }

// BaseResponseValidationError is the validation error returned by
// BaseResponse.Validate if the designated constraints aren't met.
type BaseResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BaseResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BaseResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BaseResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BaseResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BaseResponseValidationError) ErrorName() string { return "BaseResponseValidationError" }

// Error satisfies the builtin error interface
func (e BaseResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBaseResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BaseResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BaseResponseValidationError{}

// Validate checks the field values on Value with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Value) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Value with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ValueMultiError, or nil if none found.
func (m *Value) ValidateAll() error {
	return m.validate(true)
}

func (m *Value) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Value.(type) {
	case *Value_IntValue:
		if v == nil {
			err := ValueValidationError{
				field:  "Value",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for IntValue
	case *Value_FloatValue:
		if v == nil {
			err := ValueValidationError{
				field:  "Value",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for FloatValue
	case *Value_StringValue:
		if v == nil {
			err := ValueValidationError{
				field:  "Value",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for StringValue
	case *Value_BoolValue:
		if v == nil {
			err := ValueValidationError{
				field:  "Value",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for BoolValue
	case *Value_BytesValue:
		if v == nil {
			err := ValueValidationError{
				field:  "Value",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for BytesValue
	case *Value_DateValue:
		if v == nil {
			err := ValueValidationError{
				field:  "Value",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetDateValue()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ValueValidationError{
						field:  "DateValue",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ValueValidationError{
						field:  "DateValue",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetDateValue()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ValueValidationError{
					field:  "DateValue",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Value_DateRange:
		if v == nil {
			err := ValueValidationError{
				field:  "Value",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetDateRange()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ValueValidationError{
						field:  "DateRange",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ValueValidationError{
						field:  "DateRange",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetDateRange()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ValueValidationError{
					field:  "DateRange",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return ValueMultiError(errors)
	}

	return nil
}

// ValueMultiError is an error wrapping multiple validation errors returned by
// Value.ValidateAll() if the designated constraints aren't met.
type ValueMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ValueMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ValueMultiError) AllErrors() []error { return m }

// ValueValidationError is the validation error returned by Value.Validate if
// the designated constraints aren't met.
type ValueValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ValueValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ValueValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ValueValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ValueValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ValueValidationError) ErrorName() string { return "ValueValidationError" }

// Error satisfies the builtin error interface
func (e ValueValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sValue.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ValueValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ValueValidationError{}

// Validate checks the field values on DateRange with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DateRange) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DateRange with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DateRangeMultiError, or nil
// if none found.
func (m *DateRange) ValidateAll() error {
	return m.validate(true)
}

func (m *DateRange) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetStartDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DateRangeValidationError{
					field:  "StartDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DateRangeValidationError{
					field:  "StartDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStartDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DateRangeValidationError{
				field:  "StartDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetEndDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DateRangeValidationError{
					field:  "EndDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DateRangeValidationError{
					field:  "EndDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEndDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DateRangeValidationError{
				field:  "EndDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DateRangeMultiError(errors)
	}

	return nil
}

// DateRangeMultiError is an error wrapping multiple validation errors returned
// by DateRange.ValidateAll() if the designated constraints aren't met.
type DateRangeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DateRangeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DateRangeMultiError) AllErrors() []error { return m }

// DateRangeValidationError is the validation error returned by
// DateRange.Validate if the designated constraints aren't met.
type DateRangeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DateRangeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DateRangeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DateRangeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DateRangeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DateRangeValidationError) ErrorName() string { return "DateRangeValidationError" }

// Error satisfies the builtin error interface
func (e DateRangeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDateRange.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DateRangeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DateRangeValidationError{}

// Validate checks the field values on Column with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Column) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Column with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ColumnMultiError, or nil if none found.
func (m *Column) ValidateAll() error {
	return m.validate(true)
}

func (m *Column) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Exp

	// no validation rules for Value

	// no validation rules for Logic

	if len(errors) > 0 {
		return ColumnMultiError(errors)
	}

	return nil
}

// ColumnMultiError is an error wrapping multiple validation errors returned by
// Column.ValidateAll() if the designated constraints aren't met.
type ColumnMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ColumnMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ColumnMultiError) AllErrors() []error { return m }

// ColumnValidationError is the validation error returned by Column.Validate if
// the designated constraints aren't met.
type ColumnValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ColumnValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ColumnValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ColumnValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ColumnValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ColumnValidationError) ErrorName() string { return "ColumnValidationError" }

// Error satisfies the builtin error interface
func (e ColumnValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sColumn.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ColumnValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ColumnValidationError{}

// Validate checks the field values on Params with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Params) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Params with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ParamsMultiError, or nil if none found.
func (m *Params) ValidateAll() error {
	return m.validate(true)
}

func (m *Params) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPage() <= 0 {
		err := ParamsValidationError{
			field:  "Page",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetLimit() <= 0 {
		err := ParamsValidationError{
			field:  "Limit",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Sort

	for idx, item := range m.GetColumns() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ParamsValidationError{
						field:  fmt.Sprintf("Columns[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ParamsValidationError{
						field:  fmt.Sprintf("Columns[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ParamsValidationError{
					field:  fmt.Sprintf("Columns[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ParamsMultiError(errors)
	}

	return nil
}

// ParamsMultiError is an error wrapping multiple validation errors returned by
// Params.ValidateAll() if the designated constraints aren't met.
type ParamsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ParamsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ParamsMultiError) AllErrors() []error { return m }

// ParamsValidationError is the validation error returned by Params.Validate if
// the designated constraints aren't met.
type ParamsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ParamsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ParamsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ParamsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ParamsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ParamsValidationError) ErrorName() string { return "ParamsValidationError" }

// Error satisfies the builtin error interface
func (e ParamsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sParams.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ParamsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ParamsValidationError{}

// Validate checks the field values on Conditions with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Conditions) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Conditions with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ConditionsMultiError, or
// nil if none found.
func (m *Conditions) ValidateAll() error {
	return m.validate(true)
}

func (m *Conditions) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetColumns() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ConditionsValidationError{
						field:  fmt.Sprintf("Columns[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ConditionsValidationError{
						field:  fmt.Sprintf("Columns[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ConditionsValidationError{
					field:  fmt.Sprintf("Columns[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ConditionsMultiError(errors)
	}

	return nil
}

// ConditionsMultiError is an error wrapping multiple validation errors
// returned by Conditions.ValidateAll() if the designated constraints aren't met.
type ConditionsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConditionsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConditionsMultiError) AllErrors() []error { return m }

// ConditionsValidationError is the validation error returned by
// Conditions.Validate if the designated constraints aren't met.
type ConditionsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConditionsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConditionsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConditionsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConditionsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConditionsValidationError) ErrorName() string { return "ConditionsValidationError" }

// Error satisfies the builtin error interface
func (e ConditionsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConditions.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConditionsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConditionsValidationError{}
